#include <iostream>
#include <stack>
#include <cctype>
#include <algorithm>
using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

string infixToPostfix(string infix) {
    stack<char> s;
    string postfix;
    for (char ch : infix) {
        if (isalnum(ch)) postfix += ch;
        else if (ch == '(') s.push(ch);
        else if (ch == ')') {
            while (!s.empty() && s.top() != '(') postfix += s.top(), s.pop();
            if (!s.empty()) s.pop();
        } else {
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) postfix += s.top(), s.pop();
            s.push(ch);
        }
    }
    while (!s.empty()) postfix += s.top(), s.pop();
    return postfix;
}

string infixToPrefix(string infix) {
    reverse(infix.begin(), infix.end());
    for (char &ch : infix) ch = (ch == '(' ? ')' : ch == ')' ? '(' : ch);
    string prefix = infixToPostfix(infix);
    reverse(prefix.begin(), prefix.end());
    return prefix;
}

int evaluateExpression(string expr, bool isPrefix) {
    stack<int> s;
    if (isPrefix) reverse(expr.begin(), expr.end());
    for (char ch : expr) {
        if (isdigit(ch)) s.push(ch - '0');
        else {
            int b = s.top(); s.pop();
            int a = s.top(); s.pop();
            if (isPrefix) swap(a, b);
            if (ch == '+') s.push(a + b);
            else if (ch == '-') s.push(a - b);
            else if (ch == '*') s.push(a * b);
            else if (ch == '/') {
                if (b == 0) throw runtime_error("Division by zero");
                s.push(a / b);
            }
        }
    }
    return s.top();
}

int main() {
    try {
        string infix = "(3+5)*2";
        string postfix = infixToPostfix(infix);
        string prefix = infixToPrefix(infix);

        cout << "Postfix: " << postfix << endl;
        cout << "Prefix: " << prefix << endl;
        cout << "Postfix Evaluation: " << evaluateExpression(postfix, false) << endl;
        cout << "Prefix Evaluation: " << evaluateExpression(prefix, true) << endl;
    } catch (const runtime_error &e) {
        cerr << "Error: " << e.what() << endl;
    }
    return 0;
}
