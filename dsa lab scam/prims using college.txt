#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct Edge { int v, w; };
class Graph {
    int n; vector<vector<Edge>> adj;
public:
    Graph(int nodes) : n(nodes), adj(nodes) {}
    void addEdge(int u, int v, int w) { adj[u].push_back({v, w}); adj[v].push_back({u, w}); }
    void primMST() {
        vector<int> key(n, INT_MAX), parent(n, -1);
        vector<bool> inMST(n, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.push({0, 0}); key[0] = 0;
        while (!pq.empty()) {
            int u = pq.top().second; pq.pop();
            if (inMST[u]) continue;
            inMST[u] = true;
            for (auto& e : adj[u])
                if (!inMST[e.v] && e.w < key[e.v]) {
                    key[e.v] = e.w; parent[e.v] = u;
                    pq.push({key[e.v], e.v});
                }
        }
        for (int i = 1; i < n; ++i) cout << parent[i] << " - " << i << endl;
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1, 4); g.addEdge(0, 2, 4); g.addEdge(1, 2, 2);
    g.addEdge(1, 3, 5); g.addEdge(2, 3, 8); g.addEdge(3, 4, 6);
    g.addEdge(4, 5, 3); g.addEdge(3, 5, 7);
    g.primMST();
    return 0;
}
